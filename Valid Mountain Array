/**
Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Example 1:

Input: arr = [2,1]
Output: false
Example 2:

Input: arr = [3,5,5]
Output: false
Example 3:

Input: arr = [0,3,2,1]
Output: true
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

**/

class Solution {
    public boolean validMountainArray(int[] arr) {
        boolean clause1=true;
        boolean clause2=true;

        int j=0;
        if(arr.length<3) {
         clause1=clause2=false;
            }
        for(int i=0;i<arr.length-1;i++) {
            if(arr[i]>arr[i+1]){
                j=i;
                break;
            } else if(arr[i]==arr[i+1]) {
                clause1=false;
            }
        }
        System.out.println(j);
        if(j==0){
            clause1=clause2=false;
        }
        
        for(int k=j; k<arr.length-1;k++) {
            if(arr[k]<arr[k+1]){
             clause2=false;
                break;
            } else if(arr[k]==arr[k+1]) {
                clause2=false;
                break;
            }
        }
        System.out.println(clause1);
        System.out.println(clause2);
        return(clause1 && clause2);
    }
}
