/**
Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
    
 **/
           
            
class Solution {
    public int[] sortedSquares(int[] nums) {
        int left =0;
        int right=nums.length-1;
        int finalArr[] = new int[nums.length];
        
        for(int i=0;i<nums.length-1;i++) {
        nums[i]*=nums[i];
        }
 
        
        for(int i=nums.length-1;i>=0;i--) {
            if(nums[left]>nums[right]) {
            finalArr[i]=nums[left];
            left++;

            } else{
            finalArr[i]=nums[right];
            right--;
            }
            
        }
        return finalArr;
    }
}  


/**
nums=[16,1,0,9,100] 
finalArr=[0,1,9,16,100]

Dry Run:
       
        16>100, final[4]=100,right=3 left=0
        16>9, final[3]=16, right=3 left=1
        1>9, final[2]=9, right=2 left=1
        1>0 final[1]=1 right=2 left=2
        0>0 final[0]=0 right=1 left=2
            
**/ 
