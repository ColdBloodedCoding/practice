class Solution {
    public void duplicateZeros(int[] arr) {
        int count = 0;
        int length = arr.length - 1;

        // Find the number of zeros to be duplicated
        // Stopping when left points beyond the last element in the original array
        // which would be part of the modified array
        for (int i = 0; i <= length - count; i++) {

            // Count the zeros
            if (arr[i] == 0) {

                // Edge case: This zero can't be duplicated. We have no more space,
                // as left is pointing to the end element which could be included  
                if (i == length - count) {
                    // For this zero we just copy it without duplication.
                    arr[length] = 0;
                    length -= 1;
                    break;
                }
                count++;
            }
        }

        // Start backwards from the end element which would be part of new array.
        int end = length - count;

        // Copy zero twice, and non zero once.
        for (int i = end; i >= 0; i--) {
            if (arr[i] == 0) {
                arr[i + count] = 0;
                count--;
                arr[i + count] = 0;
            } else {
                arr[i + count] = arr[i];
            }
        }
    }
}
