/* Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/

class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        int max=0;
        int count=0;
        int previous=0;
        
        Map<Character,Integer> map =new HashMap<Character,Integer>();
        char charArray[]=s.toCharArray();
        
        for(int i=0;i<charArray.length;i++){
            count++;
            if(map.containsKey(charArray[i])){
                if(map.get(charArray[i])>previous) {
                   previous= map.get(charArray[i]);
                } 
              
               map.replace(charArray[i],count);
                max=Math.max((count-previous),max);

            } else{
                map.put(charArray[i],count);
                max=Math.max((count-previous),max);
            }
        }
            return max;
    }
}
