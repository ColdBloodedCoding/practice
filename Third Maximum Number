/*
Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Can you find an O(n) solution?
*/

class Solution {
    public int thirdMax(int[] nums) {
        
        
        Integer firstMax = null;
        Integer secondMax = null;
        Integer thirdMax = null;
        
        for (Integer num : nums) {
            if (num.equals(firstMax) || num.equals(secondMax) || num.equals(thirdMax)) {
                continue; // Skip duplicates
            }
            
            if (firstMax == null || num > firstMax) {
                thirdMax = secondMax;
                secondMax = firstMax;
                firstMax = num;
            } else if (secondMax == null || num > secondMax) {
                thirdMax = secondMax;
                secondMax = num;
            } else if (thirdMax == null || num > thirdMax) {
                thirdMax = num;
            }
        }
        
        return thirdMax != null ? thirdMax : firstMax;
    }


        
     //   int start=0;
      //  int end=nums.length-1;
      //  int arr[]=new int[nums.length];        
        
      //  Set<Integer> set =new TreeSet<Integer>();         
       // Arrays.stream(nums).forEach(x->set.add(x));               
       // Integer finalArr[] = new Integer[set.size()];
       // set.toArray(finalArr); 
        
       // if(finalArr.length>2){
        //    return finalArr[finalArr.length-3];
       // }else {
         //   return finalArr[finalArr.length-1];
        //} 
    //}       
}
        
